library(haven)
library(naniar)
library(gtsummary)
library(pROC)
library(dplyr)
library(caret)
library(polycor)
library(tidyr)
library(Hmisc)
library(mice)
library(here)
library(knitr)
frax_risk <- read_sas(here("data","frax_risk.sas7bdat"), NULL)
frax_risk <-as.data.frame(frax_risk)
# delete the observations first
#
# replace "don't know" and "refused" with NA
dn9<-c("ALQ101","DBQ197","DBQ229","DIQ010","DIQ220","MCQ190","MCQ160C","OSQ010A","OSQ010B","OSQ010C","OSQ040AA","OSQ040BA","OSQ040CA","OSQ070","OSQ130","OSQ170","OSQ200","OSQ140U","SMQ020")
dn999<-c("ALQ130","ALQ140Q","DID040","OSQ140Q")
dn9999<-c("OSQ020A","OSQ020B","OSQ020C","WHD020","WHD110","WHD010")
# no column named WHD140 in this data set
dn99999<-c("MCQ160A","MCQ180A","MCQ180C","MCQ160L","MCQ170L","MCQ180L")
frax_risk[,dn9]<-na_if(frax_risk[,dn9],9)
frax_risk[,dn9]<-na_if(frax_risk[,dn9],7)
frax_risk[,dn999]<-na_if(frax_risk[,dn999],999)
frax_risk[,dn999]<-na_if(frax_risk[,dn999],777)
frax_risk[,dn9999]<-na_if(frax_risk[,dn9999],9999)
frax_risk[,dn9999]<-na_if(frax_risk[,dn9999],7777)
frax_risk[,dn99999]<-na_if(frax_risk[,dn99999],99999)
frax_risk[,dn99999]<-na_if(frax_risk[,dn99999],77777)
# check missing values of all variables
gg_miss_var(frax_risk, show_pct = TRUE)
# pick variables with missing value proportion over 50%
frax_risk_50<-frax_risk[, which(colMeans(is.na(frax_risk)) > 0.5)]
gg_miss_var(frax_risk_50, show_pct = TRUE)
# missing value more than 20%
frax_risk_2050<-frax_risk[, which((colMeans(is.na(frax_risk)) <= 0.5)&(colMeans(is.na(frax_risk)) > 0.2))]
gg_miss_var(frax_risk_2050, show_pct = TRUE)
length(frax_risk_2050)
# missing value less than 20%
frax_risk_20<-frax_risk[, which(colMeans(is.na(frax_risk)) <= 0.2)]
gg_miss_var(frax_risk_20, show_pct = TRUE)
# create a data frame
df<-frax_risk[, which(colMeans(is.na(frax_risk)) <= 0.4)]
# remove duplicate rows
df<-distinct(df)
# check features with low variance
nearZeroVar(df,saveMetrics = TRUE)
# check features with high correlation
Corr <- NULL
# Chi-square test between two categorical variables.
# Pearson’s Test between two continuous variables
# Point-Biserial Correlation One categorical and one quantitative variable.
discrete <- c("RIAGENDR","RIDRETH1","SDMVPSU","OSQ010A","OSQ010B","OSQ010C","OSQ130","OSQ170","OSQ200","SMQ020" ,               "ALQ101","ALQ130","ALQ140Q","DIQ010","MCQ160A","MCQ160C","MCQ160L","DBQ197","DBQ229")
complete <- na.omit(df)
for(i in 2:(ncol(complete)-1)){
for(j in (i+1):ncol(complete)){
if((names(complete)[i] %in% discrete + names(complete)[j] %in% discrete) != 1){
Corr <- rbind(Corr, c(names(complete)[i],names(complete)[j], cor.test(complete[,i], complete[,j], method = "pearson")$estimate))
}else
Corr <- rbind(Corr, c(names(complete)[i],names(complete)[j], polyserial(complete[,i],complete[,j])))
}
}
#Corr(BMXBMI, WHD020) = 0.83974550051039
df <-  subset(df, select = -c(SEQN,WHD010,WHD020,WHD110)) # remove high correlated
df <- df[-which(is.na(df$OSQ010A)|is.na(df$OSQ010B)|is.na(df$OSQ010C)),]
# multiple imputation
(fmla <- as.formula(paste(" ~ ", paste(colnames(df), collapse=" +"))))
impute_arg <- aregImpute(formula = fmla, data = df, n.impute = 10, nk=0 )
# Get the imputed values
impute <- impute.transcan(impute_arg, data=df, imputation=1, list.out=TRUE, pr=FALSE, check=FALSE)
# convert the list to the database
impute <- as.data.frame(do.call(cbind,impute))
format(colSums(is.na(df[, sapply(df, anyNA)])) / nrow(df)*100, digits = 2) #DXXOSBMD
index.na <- which(is.na(df$DXXOSBMD))
Comparison <- data.frame(DXXOSBMD = c(df$DXXOSBMD[-index.na],impute$DXXOSBMD[index.na]),
Label = c(rep("Observed",(nrow(impute)-length(index.na))),rep("imputed",length(index.na))))
# remove Survey weights and sampling unit information
impute<-impute[,-c(4:6)]
impute<-impute%>% mutate(fracture=as.factor(ifelse((OSQ010A=="1"|OSQ010B=="1"|OSQ010C=="1"), 1, 0))) # add fracture indicator
impute$fracture <- as.numeric(impute$fracture)-1
frax_risk_men<-impute%>%filter(RIAGENDR==1)
frax_risk_women<-impute%>%filter(RIAGENDR==2)
impute$RIAGENDR <- as.factor(impute$RIAGENDR)
impute$RIDRETH1 <- as.factor(impute$RIDRETH1)
require(qqplotr)
# Histogram with density plot
p1 <- ggplot(Comparison, aes(DXXOSBMD, colour = Label)) +
geom_histogram(aes(y=..density..), colour="lightblue", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
# Interleaved histograms
p2 <- ggplot(Comparison, aes(DXXOSBMD, colour = Label)) +
geom_histogram(fill="white", alpha=0.5)+
theme(legend.position="right")
#quantile–quantile
p3 <- ggplot(data = Comparison, mapping = aes(sample = DXXOSBMD, color = Label,fill = Label)) +
stat_qq_band(alpha=0.3) +
stat_qq_line() +
stat_qq_point(alpha=0.1) +
labs(x = "DXXOSBMD Observed", y = "DXXOSBMD Imputed")
#cumulative distribution
p4 <- ggplot(Comparison, aes(DXXOSBMD, colour = Label)) +
stat_ecdf() +
labs(x = "DXXOSBMD", y = "Cumulative Probability")
library(cowplot)
ggdraw() +
draw_plot(p1, x = 0, y = .5, width = .5, height = .5) +
draw_plot(p2, x = .5, y = .5, width = .5, height = .5) +
draw_plot(p3, x = 0, y = 0, width = .5, height = 0.5) +
draw_plot(p4, x = 0.5, y = 0, width = .5, height = 0.5)
table <-
tbl_summary(
impute,
by = RIAGENDR # split table by group
) %>%
add_n() %>% # add column with total number of non-missing observations
add_p() %>% # test for a difference between groups
modify_header(label = "**Variable**") %>% # update the column header
bold_labels()
table
library(glmnet)
# Step 1: prepare features for modeling
fracture_variables<-c("OSQ010A","OSQ010B","OSQ010C","fracture")
individual_variables<-c("RIAGENDR","RIDRETH1","RIDAGEYR")
frax_risk_BMD<-dplyr::select(impute,contains("BMD"))
frax_risk_nonBMD<-impute[,!(names(impute) %in% names(frax_risk_BMD))
& !(names(impute) %in% fracture_variables)
& !(names(impute) %in% individual_variables)]
BMD_variables<-colnames(frax_risk_BMD)
nonBMD_variables<-colnames(frax_risk_nonBMD)
#q1
x1 <-scale(model.matrix(fracture~., impute[,!names(impute) %in% c("OSQ010A","OSQ010B","OSQ010C")])[,-1])
y1 <- impute$fracture
set.seed(123)
cv.l1 <- cv.glmnet(x1,y1,family="binomial",nfolds = 5,alpha=1,penalty.factor =c(rep(0,10),rep(1,10),rep(0,8)))
best_lambda.l1<-cv.l1$lambda.min
set.seed(123)
l.mod1<- glmnet(x1,y1,family="binomial",alpha=1,lambda = best_lambda.l1,penalty.factor =c(rep(0,10),rep(1,10),rep(0,8)))
coef.l.min1 <- coef(l.mod1)
feature1 <- rownames(coef.l.min1)[coef.l.min1[,1]!=0][-1]
BMDfeature1<-grep("BMD",feature1,value=T)
BMDfeature1
#q2
x.hip <-scale(model.matrix(OSQ010A~., impute[,!names(impute) %in% c("fracture","OSQ010B","OSQ010C")])[,-1])
y.hip <- impute$OSQ010A
set.seed(123)
cv.l.hip <- cv.glmnet(x.hip,y.hip,family="binomial",nfolds = 5,alpha=1,penalty.factor =c(rep(0,10),rep(1,10),rep(0,8)))
best_lambda.l.hip<-cv.l.hip$lambda.min
set.seed(123)
l.mod.hip<- glmnet(x.hip,y.hip,family="binomial",alpha=1,lambda = best_lambda.l.hip,penalty.factor =c(rep(0,10),rep(1,10),rep(0,8)))
coef.l.min.hip<- coef(l.mod.hip)
feature.hip <- rownames(coef.l.min.hip)[coef.l.min.hip[,1]!=0][-1]
BMDfeature.hip<-grep("BMD",feature.hip,value=T)
BMDfeature.hip
#q3
## men
x.men <-scale(model.matrix(fracture~., frax_risk_men[,!names(frax_risk_men) %in% c("RIAGENDR","OSQ010A","OSQ010B","OSQ010C")])[,-1])
y.men <- frax_risk_men$fracture
set.seed(123)
cv.l.men <- cv.glmnet(x.men,y.men,family="binomial",nfolds = 5,alpha=1,penalty.factor =c(rep(0,6),rep(1,10),rep(0,8)))
best_lambda.l.men<-cv.l.men$lambda.min
set.seed(123)
l.mod.men<- glmnet(x.men,y.men,family="binomial",alpha=1,lambda = best_lambda.l.men,penalty.factor =c(rep(0,6),rep(1,10),rep(0,8)))
coef.l.min.men <- coef(l.mod.men)
feature.men <- rownames(coef.l.min.men)[coef.l.min.men[,1]!=0][-1]
BMDfeature.men<-grep("BMD",feature.men,value=T)
BMDfeature.men
## women
x.women <-scale(model.matrix(fracture~., frax_risk_women[,!names(frax_risk_women) %in% c("RIAGENDR","OSQ010A","OSQ010B","OSQ010C")])[,-1])
y.women <- frax_risk_women$fracture
set.seed(123)
cv.l.women <- cv.glmnet(x.women,y.women,family="binomial",nfolds = 5,alpha=1,penalty.factor =c(rep(0,6),rep(1,10),rep(0,8)))
best_lambda.l.women<-cv.l.women$lambda.min
set.seed(123)
l.mod.women<- glmnet(x.women,y.women,family="binomial",alpha=1,lambda = best_lambda.l.women,penalty.factor =c(rep(0,6),rep(1,10),rep(0,8)))
coef.l.min.women <- coef(l.mod.women)
feature.women <- rownames(coef.l.min.women)[coef.l.min.women[,1]!=0][-1]
BMDfeature.women<-grep("BMD",feature.women,value=T)
BMDfeature.women
BMD_variables
nonBMD_variables
x1
frax_risk_men
BMD_variables
nonBMD_variables
frax_risk_BMD
y1
impute
impute$fracture
frax_risk_women[,!names(frax_risk_women) %in% c("RIAGENDR","OSQ010A","OSQ010B","OSQ010C")])[,-1]
frax_risk_women[,!names(frax_risk_women) %in% c("RIAGENDR","OSQ010A","OSQ010B","OSQ010C")]
# LOGITIC REGREION
model <- glm(fracture~., family=binomial(link='logit'), data=impute)
# Respone variable=impute$fracture
# Explanatory Variable=impute[,!names(impute) %in% c("OSQ010A","OSQ010B","OSQ010C")]
# Q3
# frax_risk_men
# frax_risk_women$fracture
# frax_risk_women[,!names(frax_risk_women) %in% c("RIAGENDR","OSQ010A","OSQ010B","OSQ010C")]
summary(model)
model <- glm(fracture~., family=binomial(link='logit'), data=impute[,!names(impute) %in% c("OSQ010A","OSQ010B","OSQ010C")])
summary(model)
summary(model)$coef
# LOGITIC REGREION
library(car)
vif(model)
